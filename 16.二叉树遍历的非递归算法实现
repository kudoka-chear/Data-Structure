// 实现二叉树前序、中序遍历的非递归算法； 
#include<bits/stdc++.h>
#include<stdio.h>
using namespace std;
#define ok 1

typedef char TElemType;
typedef char Status;
string ch;
int len;
int p=0;
typedef struct BiTNode{
	TElemType data;
	struct BiTNode *lchild,*rchild;
}BiTNode,*BiTree;
//初始化
int Init(BiTree *t) {
	*t=(BiTree)malloc(sizeof(BiTNode));
	(*t)->lchild=NULL;
	(*t)->rchild=NULL;
}

//建立一个二叉树
int CreatBitree(BiTree *t,int &p){
	if(p>=len) return 0;
	if(ch[p]=='#'){
		*t=NULL;
		p++;
	}else{
		*t=(BiTree)malloc(sizeof(BiTNode));
		(*t)->data=ch[p];
		p++;
		CreatBitree(&(*t)->lchild,p);
		CreatBitree(&(*t)->rchild,p);
	}
} 
//先序遍历
int PreOrderTraverse(BiTree t){
	stack<BiTree>s;
	while(t||!s.empty()){
		while(t){
			cout<<t->data;
			s.push(t);
			t=t->lchild;
		}
		if(!s.empty()){
			t=s.top();
			s.pop();
			t=t->rchild;
		}
	}
} 
//中序遍历
int InOrderTraverse1(BiTree t){
	stack<BiTree>s;
	while(t||!s.empty()){
		while(t){
			cout<<t->data;
			s.push(t);
			t=t->lchild;
		}
		if(!s.empty()){
			t=s.top();
			s.pop();
			t=t->rchild;
		}
	}
} 
int main(){
	while(cin>>ch){
		p=0;
		len=ch.size();
		BiTree t;
		CreatBitree(&t,p);
		cout<<"前序遍历的结果为：";
		PreOrderTraverse(t);
		cout<<endl;
		cout<<"中序遍历的结果为：";
		InOrderTraverse1(t);
		cout<<endl;
	}
}
