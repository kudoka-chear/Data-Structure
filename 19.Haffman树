#include<bits/stdc++.h>
#include<stdio.h>
using namespace std;

#define ifor(n) for(int i=0;i<n;i++)
#define ofor(n) for(int o=1;o<=n;o++)
#define error 0;
#define ok 1; 
typedef char TElemType;

typedef struct{
	unsigned int weight;
	unsigned int parent,lchild,rchild;
}HTNode,*HuffmanTree;
typedef char **HuffmanCode;

int Select(HTNode ht[],int n,int *s1,int *s2)
{
	int min1=10000,min2=10000;
	ofor(n){
		if(ht[o].weight<min1&&ht[o].parent==0){
			min1=(ht[o].weight);
			*s1=o;
		}
	}
	ht[*s1].parent=1;
	for(int i=1;i<=n;i++){
		if(ht[i].weight<min2&&ht[i].parent==0){
			min2=(ht[i].weight);
			*s2=i;
		}
	}
	ht[*s2].parent=1;
	int j;
	if(*s1>*s2){
		j=*s1;
		*s1=*s2;
		*s2=j;
	}
}
int HuffmanCoding(int *w,int n){
	if(n<=1)
    return 0;
    int m=2*n-1;
    HTNode HT[m+1];
    HuffmanTree p;
    int i;
    for(p=&HT[1],i=1;i<=n;i++,p++,w++)//初始化1到n 
    {
        p->weight=*w;
        p->lchild=0;
        p->rchild=0;
        p->parent=0;
    }
    for(;i<=m;i++,p++)//初始化n+1到m 
    {
        p->lchild=0;
        p->parent=0;
        p->rchild=0;
        p->weight=0; 
    }
    int s1=0,s2=0;
    for(i=n+1;i<=m;i++)//构建赫夫曼树 
    {
        Select(HT,i-1,&s1,&s2);//找到最小的两个权值的位置 
        HT[s1].parent=i;
        HT[s2].parent=i;
        HT[i].lchild=s1;
        HT[i].rchild=s2;
        HT[i].weight=HT[s1].weight+HT[s2].weight;
    }
    char HC[n+1][n];
    for(i=1;i<=n;i++)
    {
        char cd[n];
        cd[n-1]='\0';
        int start=n-1,c,f;
        for(c=i, f=HT[i].parent; f!=0; c=f, f=HT[f].parent)
        {
            if(HT[f].lchild==c)
            {
                start--;
                cd[start]='0';
            }
            else
            {
                start--;
                cd[start]='1';
            }
        }
        strcpy(HC[i],&cd[start]);//从start处开始  直到最后  复制到 HC里 
    }
    for(int j=1;j<=n;j++)
    {
        printf("%s",HC[j]);
        printf("\n");
    }
}
int main(){
	int n;
	cin>>n;
	int a[200];
	ifor(n){
		cin>>a[i];
	}
	int *w=&a[0];
	HuffmanCoding(w,n);
}
