#include<bits/stdc++.h>
#include<stdio.h>

using namespace std;

#define ifor(n) for(int i=0;i<n;i++)//循环
#define ofor(n) for(int o=0;o<n;o++)
#define MAXSIZE 1000
#define NUM 1
#define ok 1
#define error 0

typedef struct term{
	float coef;//系数 
	int expn;//指数 
	struct term *next;
}Poly,*Link;

int  LocateElem(Link p,Link s,Link &t){
	Link p1,p2;
	p1=p->next;
	p2=p;
	while(p1){
		if(p1->expn<s->expn){
			p1=p1->next;
			p2=p2->next;
		}else if(p1->expn==s->expn){
			t=p1;
			return 1;
		}else{
			t=p2;
			return 0;
		}
	}
	if(!p1){
		t=p2;
		return 0;
	}
}
int Creat(Link &p,int n)//创建多项式 
{
	Link t,s;
	p=(Link)malloc(sizeof(Poly));
	p->next=NULL;
	ifor(n){
		cout<<"请输入多项式的系数和指数：";
		s=(Link)malloc(sizeof(Poly));
		cin>>s->coef>>s->expn;
		if(!LocateElem(p,s,t))
		{
			s->next=t->next;
			t->next=s;
		}else
		{
			t->coef+=s->coef;
		}
	}
}
//打印多项式
int Print(Link p){
	Link s;
	s=p->next;
	cout<<"当前多项式为：";
	while(s){
		printf("%.2f X^%d",s->coef,s->expn);
		s=s->next;
		if(s!=NULL)
			if(s->coef>=0) cout<<"+";
	}
	cout<<endl;
} 
int cmp(Link p1, Link p2){//比较大小 
	if(p1->expn>p2->expn){
		return 1;
	}else if(p1->expn==p2->expn){
		return 0;
	}else{
		return -1;
	}
}
Link Addition(Link p1,Link p2){//多项式加法 
	Link p,q,newp,s,head;			//newp存放相加的结果 ,head为头结点 
	p=p1->next;q=p2->next;
	newp=(Link)malloc(sizeof(Poly));
	head=newp;
	newp->next=NULL;
	while(p1&&p2){
		switch(cmp(p1,p2)){
			case 1:
				s=(Link)malloc(sizeof(Poly));
				s->coef=p2->coef;
				s->expn=p2->expn;
				newp->next=s;
				newp=s;
				p2=p2->next;
				break;
			case 0:
				int sum;
				sum=p1->coef+p2->coef;
				if(sum!=0){
					s=(Link)malloc(sizeof(Poly));
					s->coef=sum;
					s->expn=p1->expn;
					s->expn=p2->expn;
					newp->next=s;
					newp=s;
				}
				p1=p1->next;
				p2=p2->next;
				break;
			case -1:
				s=(Link)malloc(sizeof(Poly));
				s->coef=p1->coef;
				s->expn=p1->expn;
				newp->next=s;
				newp=s;
				p1=p1->next;
				break;
		}
	}
	newp->next=p1?p1:p2;
	return head;
}
Link Sub(Link p1,Link p2){
	Link p,q,newp,s,head;			//newp存放相加的结果 ,head为头结点 
	p=p1->next;q=p2->next;
	newp=(Link)malloc(sizeof(Poly));
	head=newp;
	newp->next=NULL;
	while(p1&&p2){
		switch(cmp(p1,p2)){
			case 1:
				s=(Link)malloc(sizeof(Poly));
				s->coef=p2->coef;
				s->expn=p2->expn;
				newp->next=s;
				newp=s;
				p2=p2->next;
				break;
			case 0:
				int sum;
				sum=p1->coef-p2->coef;
				if(sum!=0){
					s=(Link)malloc(sizeof(Poly));
					s->coef=sum;
					s->expn=p1->expn;
					s->expn=p2->expn;
					newp->next=s;
					newp=s;
				}
				p1=p1->next;
				p2=p2->next;
				break;
			case -1:
				s=(Link)malloc(sizeof(Poly));
				s->coef=0-p1->coef;
				s->expn=p1->expn;
				newp->next=s;
				newp=s;
				p1=p1->next;
				break;
		}
	}
	newp->next=p1?p1:p2;
	return head;
}
int main(){
	//freopen("input.txt","r",stdin);
	Link p1,p2,res;//2个多项式,res为计算结果 
	cout<<"请输入第一个多项式项数：";
	int l1,l2;//多项式项数
	cin>>l1; 
	Creat(p1,l1);Print(p1);
	cout<<"请输入第二个多项式项数：";
	cin>>l2;
	Creat(p2,l2);Print(p2);
	cout<<"  <-----------一元多项式的运算------------>"<<endl;
	cout<<"  <--------------相加，输入1: ------------>"<<endl;
	cout<<"  <--------------相减，输入2: ------------>"<<endl;
	int choice;
	while(cin>>choice)
	{
		switch(choice)
		{
			case 1:
				res=Addition(p1,p2);
				Print(res);
				break;
			case 2:
				res=Sub(p1,p2);
				Print(res);
				break;
			default:cout<<"输入不合法"<<endl; exit(1);
		}
			
	}
}
	
